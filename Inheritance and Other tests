pragma solidity >= 0.7.0 < 0.9.0;
//A test contract challenging myself to do different things including diving into inheritance. 

contract C {
    uint private data;
    uint public info;
    constructor () {
        info = 10;
         }

        function increment(uint a) private pure virtual returns (uint){
            return a+1;
        }

            function UpdateData (uint a) public {data =a;}
            function getData () public view returns (uint) {return data;}

            }
            function compute (uint a,uint b) pure internal returns (uint) {
                uint result =  a+b;
                return result;
            }

        contract D {
            C c = new C ();
            function readInfo() public view returns (uint){
                return c.info ();
            }

            }
            contract E is C {
                uint private result;
                C private c;
                constructor (){
                    c = new C ();
                }
                 function getComputedResult () public {
                    result = compute (23,5);
                 }
                 function getResult () public view returns (uint) {
                     return result;

                 }
                 function getNewInfo() public view returns (uint){
                     return c.info();
                 }
